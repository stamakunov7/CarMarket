#!/usr/bin/env node

/**
 * Railway Migration Script
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Render.com –Ω–∞ Railway
 */

import pg from 'pg';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';

dotenv.config();

const { Pool } = pg;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ (Render.com)
const oldPool = new Pool({
  connectionString: process.env.OLD_DATABASE_URL || process.env.DATABASE_URL
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ (Railway)
const newPool = new Pool({
  connectionString: process.env.NEW_DATABASE_URL || process.env.DATABASE_URL
});

async function migrateDatabase() {
  log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å Render.com –Ω–∞ Railway...', 'cyan');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ
    log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...', 'yellow');
    await oldPool.query('SELECT 1');
    log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ —É—Å–ø–µ—à–Ω–æ', 'green');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ
    log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...', 'yellow');
    await newPool.query('SELECT 1');
    log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ —É—Å–ø–µ—à–Ω–æ', 'green');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –Ω–æ–≤–æ–π –±–∞–∑–µ
    log('üèóÔ∏è  –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –≤ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...', 'yellow');
    await createSchema(newPool);
    log('‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'green');
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    log('üì¶ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...', 'yellow');
    await migrateData();
    log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'green');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...', 'yellow');
    await verifyData();
    log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞', 'green');
    
    log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'green');
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`, 'red');
    console.error(error);
    process.exit(1);
  } finally {
    await oldPool.end();
    await newPool.end();
  }
}

async function createSchema(pool) {
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
  await pool.query(`
    CREATE TABLE IF NOT EXISTS users (
      id SERIAL PRIMARY KEY,
      username VARCHAR(100) NOT NULL,
      email VARCHAR(100) UNIQUE NOT NULL,
      password VARCHAR(200) NOT NULL,
      created_at TIMESTAMP DEFAULT NOW()
    )
  `);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã listings
  await pool.query(`
    CREATE TABLE IF NOT EXISTS listings (
      id SERIAL PRIMARY KEY,
      user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      title VARCHAR(200) NOT NULL,
      description TEXT,
      price DECIMAL(10,2) NOT NULL,
      make VARCHAR(50),
      model VARCHAR(50),
      year INTEGER,
      mileage INTEGER,
      status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'sold', 'draft')),
      created_at TIMESTAMP DEFAULT NOW(),
      updated_at TIMESTAMP DEFAULT NOW(),
      manufacturer VARCHAR(50),
      engine VARCHAR(100),
      drivetrain VARCHAR(20),
      location VARCHAR(200),
      owner_phone VARCHAR(20),
      generation VARCHAR(100),
      body_type VARCHAR(50),
      color VARCHAR(50),
      fuel_type VARCHAR(30),
      engine_volume DECIMAL(3,1),
      engine_power INTEGER,
      transmission VARCHAR(30),
      steering_wheel VARCHAR(20),
      condition VARCHAR(30),
      customs VARCHAR(20),
      region VARCHAR(100),
      registration VARCHAR(20),
      exchange_possible BOOLEAN DEFAULT FALSE,
      availability BOOLEAN DEFAULT TRUE,
      contact_person VARCHAR(100),
      tags VARCHAR(200),
      equipment TEXT,
      service_history TEXT,
      owners_count INTEGER DEFAULT 1,
      vin VARCHAR(17),
      registration_number VARCHAR(20)
    )
  `);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã listing_images
  await pool.query(`
    CREATE TABLE IF NOT EXISTS listing_images (
      id SERIAL PRIMARY KEY,
      listing_id INTEGER NOT NULL REFERENCES listings(id) ON DELETE CASCADE,
      image_url VARCHAR(500) NOT NULL,
      cloudinary_public_id VARCHAR(200),
      is_primary BOOLEAN DEFAULT FALSE,
      image_order INTEGER DEFAULT 0,
      created_at TIMESTAMP DEFAULT NOW()
    )
  `);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
  await pool.query('CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)');
  await pool.query('CREATE INDEX IF NOT EXISTS idx_listings_user_id ON listings(user_id)');
  await pool.query('CREATE INDEX IF NOT EXISTS idx_listings_status ON listings(status)');
  await pool.query('CREATE INDEX IF NOT EXISTS idx_listing_images_listing_id ON listing_images(listing_id)');
}

async function migrateData() {
  // –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  log('üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', 'blue');
  const users = await oldPool.query('SELECT * FROM users ORDER BY id');
  for (const user of users.rows) {
    await newPool.query(
      'INSERT INTO users (id, username, email, password, created_at) VALUES ($1, $2, $3, $4, $5) ON CONFLICT (id) DO NOTHING',
      [user.id, user.username, user.email, user.password, user.created_at]
    );
  }
  log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${users.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, 'green');
  
  // –ú–∏–≥—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  log('üöó –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è...', 'blue');
  const listings = await oldPool.query('SELECT * FROM listings ORDER BY id');
  for (const listing of listings.rows) {
    await newPool.query(
      `INSERT INTO listings (
        id, user_id, title, description, price, make, model, year, mileage, status,
        created_at, updated_at, manufacturer, engine, drivetrain, location, owner_phone,
        generation, body_type, color, fuel_type, engine_volume, engine_power,
        transmission, steering_wheel, condition, customs, region, registration,
        exchange_possible, availability, contact_person, tags, equipment,
        service_history, owners_count, vin, registration_number
      ) VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17,
        $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32,
        $33, $34, $35, $36, $37, $38
      ) ON CONFLICT (id) DO NOTHING`,
      [
        listing.id, listing.user_id, listing.title, listing.description, listing.price,
        listing.make, listing.model, listing.year, listing.mileage, listing.status,
        listing.created_at, listing.updated_at, listing.manufacturer, listing.engine,
        listing.drivetrain, listing.location, listing.owner_phone, listing.generation,
        listing.body_type, listing.color, listing.fuel_type, listing.engine_volume,
        listing.engine_power, listing.transmission, listing.steering_wheel,
        listing.condition, listing.customs, listing.region, listing.registration,
        listing.exchange_possible, listing.availability, listing.contact_person,
        listing.tags, listing.equipment, listing.service_history, listing.owners_count,
        listing.vin, listing.registration_number
      ]
    );
  }
  log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${listings.rows.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`, 'green');
  
  // –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  log('üñºÔ∏è  –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...', 'blue');
  const images = await oldPool.query('SELECT * FROM listing_images ORDER BY id');
  for (const image of images.rows) {
    await newPool.query(
      'INSERT INTO listing_images (id, listing_id, image_url, cloudinary_public_id, is_primary, image_order, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7) ON CONFLICT (id) DO NOTHING',
      [image.id, image.listing_id, image.image_url, image.cloudinary_public_id, image.is_primary, image.image_order, image.created_at]
    );
  }
  log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${images.rows.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`, 'green');
}

async function verifyData() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
  const oldUsersCount = await oldPool.query('SELECT COUNT(*) FROM users');
  const newUsersCount = await newPool.query('SELECT COUNT(*) FROM users');
  
  const oldListingsCount = await oldPool.query('SELECT COUNT(*) FROM listings');
  const newListingsCount = await newPool.query('SELECT COUNT(*) FROM listings');
  
  const oldImagesCount = await oldPool.query('SELECT COUNT(*) FROM listing_images');
  const newImagesCount = await newPool.query('SELECT COUNT(*) FROM listing_images');
  
  log(`üìä –°—Ç–∞—Ä–∞—è –±–∞–∑–∞: ${oldUsersCount.rows[0].count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${oldListingsCount.rows[0].count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, ${oldImagesCount.rows[0].count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`, 'blue');
  log(`üìä –ù–æ–≤–∞—è –±–∞–∑–∞: ${newUsersCount.rows[0].count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${newListingsCount.rows[0].count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, ${newImagesCount.rows[0].count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`, 'blue');
  
  if (oldUsersCount.rows[0].count !== newUsersCount.rows[0].count) {
    throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!');
  }
  
  if (oldListingsCount.rows[0].count !== newListingsCount.rows[0].count) {
    throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!');
  }
  
  if (oldImagesCount.rows[0].count !== newImagesCount.rows[0].count) {
    throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!');
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (import.meta.url === `file://${process.argv[1]}`) {
  migrateDatabase();
}

export { migrateDatabase };
