#!/usr/bin/env node

/**
 * Railway Deployment Test Script
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ø–ª–æ—è –Ω–∞ Railway
 */

import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const tests = [
  {
    name: 'Health Check',
    url: '/health',
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞'
  },
  {
    name: 'Cache Test',
    url: '/api/cache/test',
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è'
  },
  {
    name: 'Filter Options',
    url: '/api/listings/filters/options',
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ñ–∏–ª—å—Ç—Ä–æ–≤'
  },
  {
    name: 'Listings API',
    url: '/api/listings?limit=5',
    method: 'GET',
    expectedStatus: 200,
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ API –æ–±—ä—è–≤–ª–µ–Ω–∏–π'
  }
];

async function testRailwayDeployment() {
  const baseUrl = process.env.RAILWAY_URL || process.env.BACKEND_URL;
  
  if (!baseUrl) {
    log('‚ùå RAILWAY_URL –∏–ª–∏ BACKEND_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'red');
    log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è RAILWAY_URL —Å URL –≤–∞—à–µ–≥–æ Railway –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'yellow');
    process.exit(1);
  }
  
  log(`üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Railway –¥–µ–ø–ª–æ—è: ${baseUrl}`, 'cyan');
  log('=' * 60, 'blue');
  
  let passedTests = 0;
  let totalTests = tests.length;
  
  for (const test of tests) {
    try {
      log(`\nüß™ ${test.name}`, 'yellow');
      log(`üìù ${test.description}`, 'blue');
      log(`üîó ${test.method} ${baseUrl}${test.url}`, 'blue');
      
      const startTime = Date.now();
      const response = await axios({
        method: test.method,
        url: `${baseUrl}${test.url}`,
        timeout: 10000,
        headers: {
          'User-Agent': 'Railway-Test-Script/1.0'
        }
      });
      
      const duration = Date.now() - startTime;
      
      if (response.status === test.expectedStatus) {
        log(`‚úÖ ${test.name} - PASSED (${duration}ms)`, 'green');
        passedTests++;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if (test.name === 'Health Check') {
          const health = response.data;
          log(`   üìä Database: ${health.database?.status} (${health.database?.responseTime})`, 'blue');
          log(`   üìä Redis: ${health.redis?.status} (${health.redis?.responseTime})`, 'blue');
          log(`   üìä Cache: ${health.cache?.type}`, 'blue');
        }
        
        if (test.name === 'Cache Test') {
          const cache = response.data;
          log(`   üìä Cache Type: ${cache.cacheType}`, 'blue');
          log(`   üìä Redis Connected: ${cache.redisConnected}`, 'blue');
        }
        
        if (test.name === 'Listings API') {
          const data = response.data;
          log(`   üìä Listings Count: ${data.data?.listings?.length || 0}`, 'blue');
          log(`   üìä Total: ${data.data?.pagination?.total || 0}`, 'blue');
        }
        
      } else {
        log(`‚ùå ${test.name} - FAILED (Expected: ${test.expectedStatus}, Got: ${response.status})`, 'red');
      }
      
    } catch (error) {
      log(`‚ùå ${test.name} - ERROR`, 'red');
      if (error.response) {
        log(`   üìä Status: ${error.response.status}`, 'red');
        log(`   üìä Response: ${error.response.data?.message || error.response.statusText}`, 'red');
      } else if (error.code === 'ECONNREFUSED') {
        log(`   üìä Connection refused - —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω`, 'red');
      } else if (error.code === 'ENOTFOUND') {
        log(`   üìä DNS resolution failed - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL`, 'red');
      } else {
        log(`   üìä Error: ${error.message}`, 'red');
      }
    }
  }
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  log('\n' + '=' * 60, 'blue');
  log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`, 'cyan');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests}`, passedTests === totalTests ? 'green' : 'yellow');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalTests - passedTests}/${totalTests}`, passedTests === totalTests ? 'green' : 'red');
  
  if (passedTests === totalTests) {
    log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Railway –¥–µ–ø–ª–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.', 'green');
    log('üí° –í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.', 'green');
  } else {
    log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Railway.', 'yellow');
    log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', 'yellow');
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:', 'cyan');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
    const corsResponse = await axios.options(`${baseUrl}/api/listings`);
    log(`‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`, 'green');
  } catch (error) {
    log(`‚ö†Ô∏è  CORS –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`, 'yellow');
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∂–∞—Ç–∏—è
    const compressionResponse = await axios.get(`${baseUrl}/api/listings`, {
      headers: {
        'Accept-Encoding': 'gzip, deflate'
      }
    });
    const contentEncoding = compressionResponse.headers['content-encoding'];
    if (contentEncoding) {
      log(`‚úÖ –°–∂–∞—Ç–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${contentEncoding}`, 'green');
    } else {
      log(`‚ö†Ô∏è  –°–∂–∞—Ç–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ`, 'yellow');
    }
  } catch (error) {
    log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∂–∞—Ç–∏–µ`, 'yellow');
  }
  
  log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:', 'cyan');
  log('1. –û–±–Ω–æ–≤–∏—Ç–µ frontend —Å –Ω–æ–≤—ã–º API URL', 'blue');
  log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', 'blue');
  log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ Railway dashboard', 'blue');
  log('4. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –¥–µ–ø–ª–æ–π –Ω–∞ Render.com (–ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)', 'blue');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  testRailwayDeployment().catch(error => {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  });
}

export { testRailwayDeployment };
