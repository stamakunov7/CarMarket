#!/usr/bin/env node

/**
 * Test Railway Connection Script
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway
 */

import dotenv from 'dotenv';
import pg from 'pg';
import { createClient } from 'redis';

dotenv.config();

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

async function testRailwayConnection() {
  log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway...', 'cyan');
  log('=' * 60, 'blue');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:', 'yellow');
  
  const requiredVars = [
    'JWT_SECRET',
    'DATABASE_URL',
    'REDIS_URL',
    'CLOUDINARY_CLOUD_NAME',
    'CLOUDINARY_API_KEY',
    'CLOUDINARY_API_SECRET'
  ];
  
  let missingVars = [];
  
  for (const varName of requiredVars) {
    if (process.env[varName]) {
      log(`‚úÖ ${varName}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'green');
    } else {
      log(`‚ùå ${varName}: –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'red');
      missingVars.push(varName);
    }
  }
  
  if (missingVars.length > 0) {
    log(`\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missingVars.join(', ')}`, 'yellow');
    log('üí° –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway dashboard', 'blue');
    return;
  }
  
  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  log('\nüóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', 'yellow');
  
  try {
    const pool = new pg.Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: { rejectUnauthorized: false }
    });
    
    const startTime = Date.now();
    const result = await pool.query('SELECT NOW() as current_time, version() as version');
    const duration = Date.now() - startTime;
    
    log(`‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (${duration}ms)`, 'green');
    log(`   üìä –í—Ä–µ–º—è: ${result.rows[0].current_time}`, 'blue');
    log(`   üìä –í–µ—Ä—Å–∏—è: ${result.rows[0].version.split(' ')[0]}`, 'blue');
    
    await pool.end();
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: ${error.message}`, 'red');
  }
  
  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
  log('\nüî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', 'yellow');
  
  try {
    const redisClient = createClient({
      url: process.env.REDIS_URL,
      socket: {
        connectTimeout: 5000,
        lazyConnect: true
      }
    });
    
    redisClient.on('error', (err) => {
      log(`‚ùå Redis –æ—à–∏–±–∫–∞: ${err.message}`, 'red');
    });
    
    redisClient.on('connect', () => {
      log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω', 'green');
    });
    
    await redisClient.connect();
    
    const startTime = Date.now();
    await redisClient.ping();
    const duration = Date.now() - startTime;
    
    log(`‚úÖ Redis ping —É—Å–ø–µ—à–µ–Ω (${duration}ms)`, 'green');
    
    // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
    await redisClient.set('test_key', 'test_value', { EX: 10 });
    const value = await redisClient.get('test_key');
    
    if (value === 'test_value') {
      log('‚úÖ Redis –∑–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'green');
    } else {
      log('‚ùå Redis –∑–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'red');
    }
    
    await redisClient.quit();
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: ${error.message}`, 'red');
  }
  
  // –¢–µ—Å—Ç Cloudinary
  log('\n‚òÅÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cloudinary:', 'yellow');
  
  if (process.env.CLOUDINARY_CLOUD_NAME && process.env.CLOUDINARY_API_KEY && process.env.CLOUDINARY_API_SECRET) {
    log('‚úÖ Cloudinary –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'green');
    log(`   üìä Cloud Name: ${process.env.CLOUDINARY_CLOUD_NAME}`, 'blue');
  } else {
    log('‚ùå Cloudinary –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'red');
  }
  
  // –¢–µ—Å—Ç JWT
  log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT:', 'yellow');
  
  if (process.env.JWT_SECRET) {
    log('‚úÖ JWT_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'green');
    log(`   üìä –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: ${process.env.JWT_SECRET.length} —Å–∏–º–≤–æ–ª–æ–≤`, 'blue');
  } else {
    log('‚ùå JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'red');
  }
  
  log('\n' + '=' * 60, 'blue');
  log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'cyan');
  log('üí° –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏, Railway –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  testRailwayConnection().catch(error => {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  });
}

export { testRailwayConnection };
