/**
 * Redis Configuration for Railway
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis –¥–ª—è Railway
 */

import { createClient } from 'redis';
import winston from 'winston';

const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  defaultMeta: { service: 'redis-config' },
  transports: [
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.simple()
      )
    })
  ]
});

// Railway Redis Configuration
const railwayRedisConfig = {
  // Railway –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REDIS_URL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  url: process.env.REDIS_URL,
  
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Railway
  socket: {
    connectTimeout: 10000,      // 10 —Å–µ–∫—É–Ω–¥
    lazyConnect: true,          // –õ–µ–Ω–∏–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    reconnectStrategy: (retries) => {
      if (retries > 20) {
        logger.error('Redis: Max reconnection attempts reached');
        return new Error('Max reconnection attempts reached');
      }
      // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 100ms, 200ms, 400ms, 800ms, etc.
      return Math.min(retries * 100, 3000);
    }
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è production
  retryDelayOnFailover: 100,
  maxRetriesPerRequest: 3,
  
  // Railway —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  keepAlive: 30000,  // 30 —Å–µ–∫—É–Ω–¥
  family: 4,         // IPv4
};

// Fallback cache –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
const fallbackCache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

let redisClient = null;
let isConnected = false;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Railway
 */
export async function initializeRailwayRedis() {
  try {
    if (!process.env.REDIS_URL) {
      logger.warn('‚ö†Ô∏è  REDIS_URL not configured, using in-memory cache only');
      logger.info('üí° Railway will provide REDIS_URL automatically when Redis service is added');
      return false;
    }

    logger.info('üîÑ Initializing Railway Redis connection...');
    
    redisClient = createClient(railwayRedisConfig);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    redisClient.on('error', (err) => {
      logger.error('Redis Client Error:', err.message);
      isConnected = false;
    });
    
    redisClient.on('connect', () => {
      logger.info('‚úÖ Redis connected to Railway');
      isConnected = true;
    });
    
    redisClient.on('ready', () => {
      logger.info('‚úÖ Redis ready for operations on Railway');
      isConnected = true;
    });
    
    redisClient.on('end', () => {
      logger.warn('Redis connection ended');
      isConnected = false;
    });
    
    redisClient.on('reconnecting', () => {
      logger.info('üîÑ Redis reconnecting...');
    });
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await redisClient.connect();
    
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await redisClient.ping();
    logger.info('‚úÖ Railway Redis connection test successful');
    
    return true;
    
  } catch (error) {
    logger.error('‚ùå Failed to connect to Railway Redis:', error.message);
    logger.info('üí° Continuing with in-memory cache only');
    redisClient = null;
    isConnected = false;
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞ —Å fallback
 */
export async function getCached(key) {
  logger.debug(`Getting cached data for key: ${key}`);
  
  // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis
  if (redisClient && isConnected) {
    try {
      const cached = await redisClient.get(key);
      if (cached) {
        logger.info(`‚úÖ Cache hit from Railway Redis: ${key}`);
        return JSON.parse(cached);
      }
    } catch (error) {
      logger.warn('Redis get error:', error.message);
      // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
      isConnected = false;
    }
  }
  
  // Fallback –∫ in-memory –∫—ç—à—É
  const item = fallbackCache.get(key);
  if (item && Date.now() - item.timestamp < CACHE_TTL) {
    logger.info(`‚úÖ Cache hit from in-memory fallback: ${key}`);
    return item.data;
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
  if (item) {
    fallbackCache.delete(key);
    logger.debug(`Expired in-memory cache entry deleted: ${key}`);
  }
  
  logger.debug(`‚ùå No cached data found for key: ${key}`);
  return null;
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à —Å fallback
 */
export async function setCache(key, data) {
  logger.debug(`Setting cache for key: ${key}`);
  
  // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Redis
  if (redisClient && isConnected) {
    try {
      await redisClient.setEx(key, 300, JSON.stringify(data)); // 5 –º–∏–Ω—É—Ç TTL
      logger.info(`‚úÖ Data cached in Railway Redis: ${key}`);
      return;
    } catch (error) {
      logger.warn('Redis set error:', error.message);
      // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
      isConnected = false;
    }
  }
  
  // Fallback –∫ in-memory –∫—ç—à—É
  fallbackCache.set(key, {
    data,
    timestamp: Date.now()
  });
  logger.info(`‚úÖ Data cached in in-memory fallback: ${key}`);
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
 */
export async function clearCache(pattern = '*') {
  if (redisClient && isConnected) {
    try {
      const keys = await redisClient.keys(pattern);
      if (keys.length > 0) {
        await redisClient.del(keys);
        logger.info(`‚úÖ Cleared ${keys.length} cache entries from Railway Redis`);
      }
    } catch (error) {
      logger.warn('Redis clear error:', error.message);
    }
  }
  
  // –û—á–∏—Å—Ç–∫–∞ fallback –∫—ç—à–∞
  if (pattern === '*') {
    fallbackCache.clear();
    logger.info('‚úÖ Cleared in-memory fallback cache');
  } else {
    // –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –¥–ª—è fallback
    for (const key of fallbackCache.keys()) {
      if (key.includes(pattern.replace('*', ''))) {
        fallbackCache.delete(key);
      }
    }
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
 */
export async function getCacheStats() {
  const stats = {
    redis: {
      connected: isConnected,
      client: !!redisClient
    },
    fallback: {
      size: fallbackCache.size,
      keys: Array.from(fallbackCache.keys())
    }
  };
  
  if (redisClient && isConnected) {
    try {
      const info = await redisClient.info('memory');
      stats.redis.info = info;
    } catch (error) {
      logger.warn('Failed to get Redis info:', error.message);
    }
  }
  
  return stats;
}

/**
 * Graceful shutdown
 */
export async function closeRedis() {
  if (redisClient) {
    try {
      await redisClient.quit();
      logger.info('‚úÖ Railway Redis connection closed gracefully');
    } catch (error) {
      logger.warn('Error closing Redis connection:', error.message);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export { redisClient, isConnected };
